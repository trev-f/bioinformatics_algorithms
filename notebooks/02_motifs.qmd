---
title: "Chapter 02 - Motifs"
format: html
---

## Median String Problem

### Generating all possible k-mers

One of the steps in solving the Median String Problem requires generating all possible k-mers for a specified *k*.
Python makes this simple to do using `itertools.product()`.
This function returns each k-mer product as a `tup` of `str`, so I use map to create a k-mer `str` from the `tup`.
Because the brute force Mediant String solution iterates over all possible k-mers, I simply return the `map` object since it is an `iterable`.

```{python}
import itertools
from collections.abc import Iterable

def generate_all_possible_kmers(k: int) -> Iterable[str]:
    prods = itertools.product('ACGT', repeat=k)
    return map(''.join, prods)

for kmer in generate_all_possible_kmers(k=2):
    print(kmer)
```

### Generating all k-mers from a DNA sequence

I am admittedly getting a little tired of rewriting code to generate k-mers from a DNA sequence, and it seems I will keep having to generate k-mers from strings so I will finally write a method to tackle this.
This is a different problem from the one above (generating all possible k-mers).
This is something I've been meaning to tackle here for a while, but now is a good time to do it.

```{python}
from typing import Iterator

def generate_kmers(dna: str, k: int) -> Iterator[str]:
    for i in range(len(dna) - k + 1):
        yield dna[i:i + k]

assert list(generate_kmers(dna='ACGT', k=2)) == ['AC', 'CG', 'GT']
assert list(generate_kmers(dna='ACGTACGT', k=7)) == ['ACGTACG', 'CGTACGT']
```
